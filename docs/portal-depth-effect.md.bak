# WebGL Portal/Depth Effect Implementation

## Overview

This document provides a guide for implementing a cosmic portal/depth effect in the existing WebGL Zen Space. This effect will create the illusion of looking into an infinite cosmic tunnel, giving the zen space dramatic visual depth and an engaging focal point.

## Integration with Existing Architecture

The portal effect will integrate with the existing layered architecture:

1. It will be placed in the WebGL Zen Space Layer
2. It will use Three.js and custom shader materials
3. It will work with the existing post-processing effects
4. It maintains compatibility with the fallback system

## Implementation Steps

### 1. Create a New Portal Mesh

Add a new plane mesh behind the nebula background that renders a portal effect using ray marching techniques:

```javascript
// Add this to the createNebula function in webgl-zen.js
createPortal: function() {
  // Create geometry (simple plane that fills view)
  const geometry = new THREE.PlaneGeometry(100, 100, 1, 1);
  
  // Create shader material for portal
  const material = new THREE.ShaderMaterial({
    uniforms: {
      uTime: { value: 0 },
      uResolution: { value: new THREE.Vector2(window.innerWidth, window.innerHeight) },
      uPortalCenter: { value: new THREE.Vector2(0.5, 0.5) },
      uPortalColor1: { value: new THREE.Color(0x3311bb) }, // Deep blue
      uPortalColor2: { value: new THREE.Color(0x9900ff) }, // Purple
      uPortalColor3: { value: new THREE.Color(0x220066) }, // Dark blue
      uPortalIntensity: { value: 1.0 }
    },
    vertexShader: `
      varying vec2 vUv;
      
      void main() {
        vUv = uv;
        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
      }
    `,
    fragmentShader: `
      uniform float uTime;
      uniform vec2 uResolution;
      uniform vec2 uPortalCenter;
      uniform vec3 uPortalColor1;
      uniform vec3 uPortalColor2;
      uniform vec3 uPortalColor3;
      uniform float uPortalIntensity;
      
      varying vec2 vUv;
      
      // Utility function for creating circular rings
      float rings(float dist, float time, float count) {
        return smoothstep(0.1, 0.9, sin(dist * count - time * 0.5) * 0.5 + 0.5);
      }
      
      void main() {
        // Calculate distance from portal center
        vec2 center = uPortalCenter;
        vec2 uv = vUv - center;
        
        // Scale aspect ratio
        uv.x *= uResolution.x / uResolution.y;
        
        // Calculate distance from center
        float dist = length(uv);
        
        // Portal effect
        // 1. Create concentric rings moving toward center
        float ringPattern = rings(dist, uTime, 20.0);
        
        // 2. Add some distortion 
        float distortion = sin(dist * 30.0 + uTime) * 0.02;
        ringPattern += distortion;
        
        // 3. Create vortex effect - swirl
        float angle = atan(uv.y, uv.x);
        float swirl = sin(angle * 8.0 + uTime + dist * 5.0) * 0.1;
        ringPattern += swirl;
        
        // 4. Apply non-linear depth transformation to simulate tunnel
        float depth = pow(dist, 0.5); // Non-linear depth effect
        
        // Calculate base color based on depth
        vec3 color = mix(uPortalColor1, uPortalColor2, depth);
        
        // Add ring pattern highlights
        color = mix(color, uPortalColor3, ringPattern * 0.5);
        
        // Add brightness at center
        float centerGlow = smoothstep(0.5, 0.0, dist) * 1.5;
        color += centerGlow * uPortalColor1;
        
        // Create fade at edges for blending with nebula
        float fade = smoothstep(1.0, 0.4, dist);
        
        // Output final color with fade at edges
        gl_FragColor = vec4(color, fade * uPortalIntensity);
      }
    `,
    transparent: true,
    blending: THREE.AdditiveBlending,
    side: THREE.DoubleSide,
    depthWrite: false
  });
  
  // Store shader material for updates
  this.shaders.portal = material;
  
  // Create mesh and position it behind nebula but in front of stars
  const portal = new THREE.Mesh(geometry, material);
  portal.position.z = -45; // Between nebula (-50) and stars (-40)
  portal.scale.set(1.5, 1.5, 1);
  
  // Add to scene
  this.scene.add(portal);
}
```

### 2. Update the WebGL Zen Space Initialization

Modify the initialization sequence to include the portal creation:

```javascript
// Add to the init function in webgl-zen.js after createNebula()
init: function(containerId) {
  // Existing initialization code...
  
  // Create scene elements
  this.createNebula();
  this.createPortal(); // Add this line
  this.createStars();
  this.createEnergyStreams();
  this.createZenElements();
  
  // Remaining code...
}
```

### 3. Update the Shader Material in the Animation Loop

Ensure the portal shader gets updated in the animation loop:

```javascript
// Add to updateMaterials function in webgl-zen.js
updateMaterials: function() {
  // Existing update code...
  
  // Update nebula shader
  if (this.shaders.nebula) {
    this.shaders.nebula.uniforms.uTime.value = this.time.elapsed;
  }
  
  // Update portal shader
  if (this.shaders.portal) {
    this.shaders.portal.uniforms.uTime.value = this.time.elapsed;
    
    // Optional: Make the portal responsive to mouse movement
    const mouseX = this.interaction.mouse.x * 0.5 + 0.5;
    const mouseY = this.interaction.mouse.y * 0.5 + 0.5;
    this.shaders.portal.uniforms.uPortalCenter.value.set(mouseX, mouseY);
  }
  
  // Remaining update code...
}
```

### 4. Create Camera Movement Toward Portal on Interaction

Make the portal interactive by having the camera move toward it when clicked:

```javascript
// Enhance onMouseClick function in webgl-zen.js
onMouseClick: function(event) {
  // Create ripple effect
  this.createRipple(event.clientX, event.clientY);
  
  // Optional: Move camera toward portal on click for immersive effect
  // Calculate the direction vector to move the camera along
  const mouseX = (event.clientX / window.innerWidth) * 2 - 1;
  const mouseY = -(event.clientY / window.innerHeight) * 2 + 1;
  
  // Create a target position that's closer to the portal
  const targetZ = this.camera.position.z - 2; // Move 2 units closer
  
  // Animate camera movement
  gsap.to(this.camera.position, {
    x: mouseX * 5, // Exaggerate x movement
    y: mouseY * 5, // Exaggerate y movement
    z: targetZ,
    duration: 1,
    ease: "power2.out",
    onComplete: () => {
      // Animate camera back to original position
      gsap.to(this.camera.position, {
        z: 50, // Original z position
        duration: 3,
        ease: "power1.inOut"
      });
    }
  });
}
```

### 5. Add Interactive Energy Flow Toward Portal

Enhance the energy streams to flow into the portal:

```javascript
// Modify createEnergyStreams in webgl-zen.js
createEnergyStreams: function() {
  // Create energy streams from different directions
  const streamDirections = [
    { x: -40, y: 20, z: -20 },
    { x: 40, y: 20, z: -20 },
    { x: 40, y: -20, z: -20 },
    { x: -40, y: -20, z: -20 }
  ];
  
  // Set target to portal center
  const target = new THREE.Vector3(0, 0, -45); // Match portal position
  
  // Create each stream
  streamDirections.forEach((position, index) => {
    this.createEnergyStream(
      new THREE.Vector3(position.x, position.y, position.z),
      target,
      this.config.colors.energy[index % this.config.colors.energy.length],
      index
    );
  });
}
```

### 6. Enhance Post-Processing for Portal Effect

Modify the bloom effect to highlight the portal:

```javascript
// Update the initPostProcessing function in webgl-zen.js
initPostProcessing: function() {
  // Create composer for post-processing
  this.composer = new THREE.EffectComposer(this.renderer);
  
  // Add render pass
  const renderPass = new THREE.RenderPass(this.scene, this.camera);
  this.composer.addPass(renderPass);
  
  // Enhanced bloom for portal effect
  const bloomPass = new THREE.UnrealBloomPass(
    new THREE.Vector2(window.innerWidth, window.innerHeight),
    this.config.bloom.strength,
    this.config.bloom.radius,
    this.config.bloom.threshold
  );
  this.composer.addPass(bloomPass);
  
  // Optional: Add depth-of-field effect to enhance depth perception
  if (window.THREE.BokehPass) {
    const bokehPass = new THREE.BokehPass(this.scene, this.camera, {
      focus: 45,     // Focus at portal depth
      aperture: 0.0025,
      maxblur: 0.01
    });
    this.composer.addPass(bokehPass);
  }
}
```

## Integration with Audio

Make the audio react to the portal's visual effects:

```javascript
// Update ZenSpace.updateAudio in zen-audio.js
updateAudio: function() {
  // Skip if audio not initialized or enabled
  if (!this.audio.initialized || !this.audio.enabled) return;
  
  // Portal pulse value (calculated in updateMaterials)
  const portalPulse = (Math.sin(this.time.elapsed * 0.3) * 0.5 + 0.5);
  
  // Apply portal pulse to audio elements
  if (this.audio.sources.ambient) {
    this.audio.sources.ambient.gainNodes.forEach(gain => {
      const baseVolume = gain.userData?.baseVolume || 0.02;
      // Add small portal pulse influence to volume
      gain.gain.value = baseVolume + portalPulse * 0.01;
    });
  }
}
```

## Performance Considerations

The portal shader uses ray marching techniques that can be performance-intensive. Consider these optimizations:

1. Limit the number of iterations in the shader
2. Use a lower resolution for the portal effect on mobile devices
3. Simplify the shader based on device capability

Add this to the config section in webgl-zen.js:

```javascript
config: {
  // Existing config...
  
  portal: {
    quality: 'auto', // 'low', 'medium', 'high', or 'auto'
    interactiveCenter: true, // Whether portal center follows mouse
    pulseSpeed: 0.3,
    ringCount: 20,
    depth: 0.5
  }
}
```

## Accessibility and Fallback

Since this effect can be resource-intensive, add appropriate fallbacks:

```javascript
// Add this check to createPortal function
createPortal: function() {
  // Check if device is likely capable of handling portal shader
  const isLowPerfDevice = 
    /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ||
    !this.renderer.capabilities.maxVertexUniforms > 4096;
    
  let quality = this.config.portal.quality;
  if (quality === 'auto') {
    quality = isLowPerfDevice ? 'low' : 'high';
  }
  
  // Adjust settings based on quality level
  let ringCount, depthDetails;
  switch(quality) {
    case 'low':
      ringCount = 10;
      depthDetails = 0.3;
      break;
    case 'medium':
      ringCount = 15;
      depthDetails = 0.5;
      break;
    case 'high':
    default:
      ringCount = 20;
      depthDetails = 0.7;
  }
  
  // Continue with portal creation using these settings...
}
```

## Conclusion

This portal/depth effect creates a dramatic focal point that gives a sense of infinite depth to the zen space. The effect is visually striking but can be scaled back for performance considerations on different devices.

Integration with the existing WebGL implementation enhances the immersive nature of the experience while maintaining the zen aesthetic. The portal serves as a visual metaphor for meditation and inner exploration, perfectly complementing the project's theme.
